export function watchRiyal(){
  try{
    if (typeof window !== "undefined") {
      if (window.__riyalObs) {
        if (typeof window.__riyalObs.disconnect === "function") {
          try { window.__riyalObs.disconnect(); } catch(e) {}
        }
      }
    }

    var FONT = "\"Saudi-Riyal\",\"Tajawal\",\"IBM Plex Sans Arabic\",\"Segoe UI\",system-ui,sans-serif";
    var SYMBOL_CHAR = "ر";
    var SELECTOR_GUESSES = [
      "select[name*=\"currency\" i]",
      "select[id*=\"currency\" i]",
      "select[class*=\"currency\" i]",
      "select[data-field*=\"currency\" i]",
      "select.currency-select",
      "select"
    ];

    function rm(s){
      var v = s ? s : "";
      return v.replace(/[\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06ED\u0640\s]/g,"").trim();
    }
    function looksRiyalWord(s){
      return /^(?:ال)?ريال(?:السعودي)?$/u.test(rm(s));
    }
    function looksRiyalSym(s){
      var v = s ? s : "";
      return /^(?:ر\.?\s?س|<RiyalSymbol />)$/iu.test(v.trim());
    }

    function labelSaysCurrency(sel){
      var id = sel.getAttribute("id");
      if (id) {
        var lab = document.querySelector('label[for="'+ CSS.escape(id) +'"]');
        if (lab) {
          var t = lab.textContent ? lab.textContent.trim() : "";
          if (/العملة/u.test(t)) { return true; }
        }
      }
      var p = sel.previousElementSibling;
      var i = 0;
      while (p && i < 3) {
        if (p.tagName === "LABEL") {
          var tt = p.textContent ? p.textContent.trim() : "";
          if (/العملة/u.test(tt)) { return true; }
        }
        p = p.previousElementSibling;
        i = i + 1;
      }
      var ok = false;
      if (sel.name) {
        if (/currency/i.test(sel.name)) { ok = true; }
      }
      if (!ok) {
        if (sel.className) {
          if (/currency/i.test(sel.className)) { ok = true; }
        }
      }
      return ok;
    }

    function applyOnSelect(sel){
      if (!sel) { return; }
      if (!labelSaysCurrency(sel)) { return; }

      var opts = sel.options ? Array.from(sel.options) : [];
      var k = 0;
      while (k < opts.length) {
        var opt = opts[k];
        var val = String(opt.value ? opt.value : "").toUpperCase();
        var txt = opt.textContent ? opt.textContent.trim() : "";
        var match = false;
        if (val === "<RiyalSymbol />") { match = true; }
        if (!match) { if (looksRiyalWord(txt)) { match = true; } }
        if (!match) { if (looksRiyalSym(txt))  { match = true; } }
        if (match) {
          if (opt.textContent !== SYMBOL_CHAR) { opt.textContent = SYMBOL_CHAR; }
          opt.classList.add("<RiyalSymbol />-ry");
        }
        k = k + 1;
      }

      function restyle(){
        var selOpt = null;
        if (sel.options) {
          if (sel.selectedIndex >= 0) { selOpt = sel.options[sel.selectedIndex]; }
        }
        var t = "";
        if (selOpt) {
          if (selOpt.textContent) { t = selOpt.textContent.trim(); }
        }
        if (t === SYMBOL_CHAR) {
          sel.classList.add("<RiyalSymbol />-ry");
          sel.style.fontFamily = FONT;
        } else {
          sel.classList.remove("<RiyalSymbol />-ry");
          sel.style.removeProperty("font-family");
        }
      }

      if (sel.__<RiyalSymbol />Hook) { sel.removeEventListener("change", sel.__<RiyalSymbol />Hook); }
      sel.__<RiyalSymbol />Hook = restyle;
      sel.addEventListener("change", restyle, { passive: true });
      restyle();
    }

    function scan(root){
      var r = root ? root : document;
      var i = 0;
      while (i < SELECTOR_GUESSES.length) {
        var q = SELECTOR_GUESSES[i];
        var found = r.querySelectorAll(q);
        var arr = Array.from(found);
        var j = 0;
        while (j < arr.length) { applyOnSelect(arr[j]); j = j + 1; }
        i = i + 1;
      }
    }

    scan();
    setTimeout(function(){ scan(); }, 120);
    setTimeout(function(){ scan(); }, 500);
    setTimeout(function(){ scan(); }, 1000);

    var obs = new MutationObserver(function(muts){
      var mIdx = 0;
      while (mIdx < muts.length) {
        var m = muts[mIdx];
        if (m.type === "childList") {
          var adds = Array.from(m.addedNodes ? m.addedNodes : []);
          var a = 0;
          while (a < adds.length) {
            var n = adds[a];
            if (n) {
              if (n.nodeType === 1) { scan(n); }
            }
            a = a + 1;
          }
        } else if (m.type === "attributes") {
          var tgt = m.target;
          var isSel = false;
          if (tgt) {
            if (tgt.matches) {
              if (tgt.matches("select")) { isSel = true; }
            }
          }
          if (isSel) { scan(tgt); }
        }
        mIdx = mIdx + 1;
      }
    });
    obs.observe(document.documentElement, { childList: true, subtree: true, attributes: true, attributeFilter: ["class","id","name"] });
    window.__riyalObs = obs;
  } catch(e) {}
}







